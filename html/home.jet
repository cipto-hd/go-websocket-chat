<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/static/bootstrap.min.css" type="text/css">
  <link rel="stylesheet" href="/static/notie.min.css">
  <title>GoChat using Gorilla/websocket</title>
  <style>
    :root {
      --color: #0be47f;
    }

    .chatbox {
      outline: 1px solid silver;
      min-height: 160px;
      padding: 0.5em;
      border-radius: 0.5em;
    }

    li.list_item_username.active {
      background-color: aquamarine;
    }

    li.list_item_username::marker {
      color: var(--color);
      font-size: 1.8rem;
    }

    li.list_item_username {
      font-size: 1.8rem;
      padding: 0 0.3rem 0.1rem 0.3rem;
      line-height: 2rem;
      border-radius: 0.5rem;
    }
  </style>
</head>

<body>
  <div class="container">
    <div class="row">
      <div class="col">
        <h1 class="mt-3">GoChat</h1>
        <hr>
      </div>
    </div>
    <div class="row">
      <div class="col-md-8">
        <h3>Chat</h3>
        <div class="form-group">
          <label for="username">Username:</label>
          <input type="text" name="username" id="username" class="form-control" autocomplete="off">
        </div>
        <div class="form-group">
          <label for="message">Message:</label>
          <input type="text" name="message" id="message" class="form-control" autocomplete="off">
        </div>

        <hr>
        <a href="javascript:void(0)" class="btn btn-outline-secondary text-black-50" id="sendBtn">Send Message</a>

        <input type="hidden" name="action" id="action">

        <div id="status" class="mt-2 float-end">

        </div>

        <div id="output" class="chatbox mt-3"></div>
      </div>
      <div class="col-md-4">
        <h3>Who's online</h3>

        <ul id="online_users">
          <li class="list"></li>
        </ul>
      </div>
    </div>
  </div>

  <script>
    let socket = null;
    let output = document.getElementById("output");
    let usernameField = document.getElementById("username");
    let messageField = document.getElementById("message");
    let sendBtn = document.getElementById("sendBtn");
    let infoDiv = document.getElementById("info");

    const green = "#0be47f";
    const red = "#dc3545";

    window.onbeforeunload = function () {
      console.log("Leaving");

      localStorage.setItem("gochat_username", usernameField.value);
      let payload = {};
      payload["action"] = "left"
      socket.send(JSON.stringify(payload));
    };

    document.addEventListener("DOMContentLoaded", function () {
      socket = new ReconnectingWebSocket("ws://localhost:8080/ws", null, { debug: true, reconnectInterval: 3000 })

      const offline = `<span class="badge bg-danger">Not connected</span>`;
      const online = `<span class="badge bg-success">Connected</span>`;
      const statusDiv = document.getElementById("status");

      socket.onopen = (ev) => {
        // console.log(ev)

        console.log("Successfully connected")
        statusDiv.innerHTML = online;

        const username = localStorage.getItem("gochat_username");
        if (username !== null || username !== "") usernameField.value = username;
        if (usernameField.value !== "") addUser(usernameField.value);
        changeListItemMarkerColor(green);

      }

      socket.onclose = (ev) => {
        // console.log(ev)

        console.log("Connection closed");
        statusDiv.innerHTML = offline;
        changeListItemMarkerColor(red);

      }

      socket.onerror = (ev) => {
        // console.log(ev)

        console.log("There was an error")

      }

      socket.onmessage = (ev) => {
        // console.log(ev)

        let data = JSON.parse(ev.data);

        switch (data.action) {
          case "welcome":
            showInfoMessage(data.message);
            break;
          case "list_users":
            let ul = document.getElementById("online_users");
            while (ul.firstChild) ul.removeChild(ul.firstChild);

            if (data.connected_users) {
              data.connected_users.forEach((item) => {
                let li = document.createElement("li");
                li.appendChild(document.createTextNode(item));
                li.classList.add("list_item_username");
                if (item === usernameField.value) li.classList.add("active");
                ul.appendChild(li);
              })
            }

            break;

          case "broadcast":
            output.innerHTML += (data.message + '<br>');
            break;

          default:
            break;
        }
      }


      usernameField.addEventListener("change", function () {
        addUser(this.value)
      })


      messageField.addEventListener("keypress", function (ev) {
        if (ev.key == "Enter") {
          if (!socket) {
            console.log("No connection");
            return;
          }
          if (usernameField.value === "" || messageField.value === "") {
            showErrorMessage("Please fill out username and message!")
            return;
          }

          ev.preventDefault()
          ev.stopPropagation()
          sendMessage()
        }

      })

      sendBtn.addEventListener("click", function (ev) {
        if (usernameField.value === "" || messageField.value === "") {
          showErrorMessage("Please fill out username and message!")
          return;
        }

        ev.preventDefault()
        ev.stopPropagation()
        sendMessage()
      });

      // if (socket.readyState) {
      //   const pageAccessedByReload = (
      //     (window.performance.navigation && window.performance.navigation.type === 1) ||
      //     window.performance
      //       .getEntriesByType('navigation')
      //       .map((nav) => nav.type)
      //       .includes('reload')
      //   );

      //   if (pageAccessedByReload) {
      //     console.log("Reload");

      //     let payload = {};
      //     payload["action"] = "left"
      //     socket.send(JSON.stringify(payload));
      //   }

      // }
    })

    /* change li item marker style using css variables */
    function changeListItemMarkerColor(color) {
      document.querySelectorAll("li.list_item_username").forEach(function (e) {
        e.style.setProperty("--color", color);
      })
    }

    function sendMessage() {
      let payload = {};
      payload["action"] = "broadcast";
      payload["username"] = usernameField.value;
      payload["message"] = messageField.value;
      messageField.value = "";
      socket.send(JSON.stringify(payload))
    }

    function showErrorMessage(msg) {
      notie.alert({
        type: "error",
        text: msg
      })
    }


    function showInfoMessage(msg) {
      notie.alert({
        type: "info",
        text: msg
      })
    }


    function addUser(username) {
      if (usernameField.value === "") {
        showErrorMessage("username cannot be blank!")
        return;
      }

      let payload = {}
      payload["action"] = "username";
      payload["username"] = username
      payload["message"] = "add new user"

      socket.send(JSON.stringify(payload))
    }
  </script>
  <script src="/static/bootstrap.bundle.min.js"></script>
  <script src="/static/notie.min.js"></script>
  <script src="/static/reconnecting-websocket.min.js"></script>

</body>

</html>